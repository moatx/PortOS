FILE LAYOUT:
  comments
  declarations:
        includes first
	macros next
	enums after that
	structures after that
	variables declerations
        prototypes after that

  for userland main function should be here
  function definitions

FILE RULES:
  /* $OSNAME: FILE, NAME $ */

  The revision control tag appears first in the file, with a blank line after it.

  Copyright text appears after the revision control tag, and a comment explaining the file will appear after that with a blank line after it.


 
COMMENT RULES:

  if the code cant explain itself then a comment is needed 

  looks:

      /*
       * VERY important single-line comments look like this.
       */
      
      /* Most single-line comments look like this. */
      
      /*
       * Multi-line comments look like this.  Make them real sentences.
       * Fill them so they look like real paragraphs.
       */

MACRO RULES:

  Macros are capitalized and parenthesized, and should avoid side-effects. 
  If they are an inline expansion of a function, the function is defined 
  all in lowercase; the macro has the same name all in uppercase. 
  If the macro is an expression, wrap the expression in parenthesis. 
  If the macro needs more than a single line, use braces. 
  Right-justify the backslashes, as the resulting definition is easier to read. 
  If the macro encapsulates a compound statement, enclose it in a “do” loop, so that 
  it can safely be used in “if” statements. 
  Any final statement-terminating semicolon should be supplied by the macro invocation rather than the 
  macro, to make parsing easier for pretty-printers and editors.
  example:

	#define	MACRO(x, y) do {					\
		variable = (x) + (y);					\
		(y) += 2;						\
	} while (0)

  If a macro with arguments declares local variables, those variables should use identifiers beginning with two underscores. 
  This is required for macros implementing C and POSIX interfaces and recommended for all macros for consistency.

ENUM RULES:
  Enumeration values are all uppercase, and no comma on the last element.
  No enum should have one line, except when there is one value.
  example:
      enum enumtype {
      	ONE,
      	TWO
      } et;


STRUCTURE RULES:
  When declaring variables in structures, declare them sorted by use, then by size (largest to smallest), then by alphabetical order. 
  The first category normally doesn't apply, but there are exceptions. Each one gets its own line. indent by tabs.
  example:
  	struct foo {
	  struct 	foo *next;	/* List of active foo */
	  struct 	mumble amumble;	/* Comment for mumble */
	  int 	bar;
	};


INCLUDE RULES:
    includes should be sorted lexicographically.
    includes that are in the same direcotry has to be a local include and come after global includes and a blank line

PROTOTYPE RULES:
  Prototypes should not have variable names associated with the types
  example:

      void	function(int);
      not:
      void	function(int a);

  Prototypes may have an extra space after a tab to enable function names to line up:

      static char	*function(int, const char *);
      static void	 usage(void);

  There should be no space between the function name and the argument list.

TYPE RULES:
  When defining unsigned integers use “unsigned int” rather than just “unsigned”; the latter has been a source of confusion in the past.
  use types in stdint; i.e., using uint8_t instead of unsigned char.

FUNCTION DEFINITION RULES:
  above every function a comment is needed to explain it
  function return type should be in one line on top of the definition in the next line and opening braces in a new line

  example:
  	int
	example(void)
	{
	}



VARIABLE RULES:
  its recommended that all variables should be local instead of global, but global if needed
  variables follow ansi c, so that means variables must be declared then defined or both at the same time
  variables decerlartions MUST be in the begging of the functions

HEADER FILE RULES:

  A header file should protect itself against multiple inclusion, and have a comment for endif to specify the closure of the current ifndef 
  statement.
  The argument for the ifndef statement should be captilized.

  example:
	#ifndef _EXAMPLE_H_ 
	#define _EXAMPLE_H_
	
	#endif /* _EXAMPLE_H_ */
